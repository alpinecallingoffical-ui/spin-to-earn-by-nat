import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from './useAuth';
import { toast } from 'sonner';

export interface Report {
  id: string;
  user_id: string;
  ticket_id: string;
  title: string;
  description: string;
  status: 'pending' | 'in_progress' | 'resolved' | 'closed';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  image_urls: string[] | null;
  admin_response: string | null;
  created_at: string;
  updated_at: string;
  resolved_at: string | null;
}

export const useReports = () => {
  const { user } = useAuth();
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(false);

  const fetchReports = async () => {
    if (!user) return;
    
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('reports')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setReports((data || []) as Report[]);
    } catch (error) {
      console.error('Error fetching reports:', error);
      toast.error('Failed to load reports');
    } finally {
      setLoading(false);
    }
  };

  const createReport = async (
    title: string,
    description: string,
    priority: 'low' | 'medium' | 'high' | 'urgent',
    imageFiles: File[]
  ) => {
    if (!user) {
      toast.error('You must be logged in to submit a report');
      return null;
    }

    try {
      // Upload images first
      const imageUrls: string[] = [];
      
      for (const file of imageFiles) {
        const fileExt = file.name.split('.').pop();
        const fileName = `${user.id}/${Date.now()}-${Math.random()}.${fileExt}`;
        
        const { error: uploadError } = await supabase.storage
          .from('report-images')
          .upload(fileName, file);

        if (uploadError) throw uploadError;

        const { data: { publicUrl } } = supabase.storage
          .from('report-images')
          .getPublicUrl(fileName);

        imageUrls.push(publicUrl);
      }

      // Create report
      const { data, error } = await supabase
        .from('reports')
        .insert({
          user_id: user.id,
          title,
          description,
          priority,
          image_urls: imageUrls.length > 0 ? imageUrls : null,
          ticket_id: '' // Will be auto-generated by trigger
        })
        .select()
        .single();

      if (error) throw error;

      toast.success(`Report submitted! Ticket ID: ${data.ticket_id}`);
      await fetchReports();
      return data;
    } catch (error) {
      console.error('Error creating report:', error);
      toast.error('Failed to submit report');
      return null;
    }
  };

  const searchReportByTicketId = async (ticketId: string) => {
    if (!user) return null;

    try {
      const { data, error } = await supabase
        .from('reports')
        .select('*')
        .eq('user_id', user.id)
        .eq('ticket_id', ticketId.toUpperCase())
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error searching report:', error);
      return null;
    }
  };

  useEffect(() => {
    if (user) {
      fetchReports();

      // Subscribe to real-time updates
      const channel = supabase
        .channel('reports-changes')
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'reports',
            filter: `user_id=eq.${user.id}`
          },
          () => {
            fetchReports();
          }
        )
        .subscribe();

      return () => {
        supabase.removeChannel(channel);
      };
    }
  }, [user]);

  return {
    reports,
    loading,
    createReport,
    searchReportByTicketId,
    fetchReports
  };
};
